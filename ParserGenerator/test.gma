# test grammer file

:RULE
$Stmts
| $Stmt $Stmts							@ Stmts 2 SavedRoot2 root @
| $Stmt									@ # @
:RULEEND

:RULE
$Stmt
| %LCB $Stmts %RCB						@ Block 1 root @
| %IF %LP $Expr %RP $Stmt %ELSE $Stmt	@ IfElse 3 SavedRoot4 SavedRoot6 root @
| %IF %LP $Expr %RP $Stmt				@ If 2 SavedRoot4 root @
| %WHILE %LP $Expr %RP $Stmt			@ While 2 SavedRoot4 root @
| %FOR %LP $StmtBase %SEMI $Expr %SEMI
	 $StmtBase %RP $Stmt				@ For 4 SavedRoot4 SavedRoot6 SavedRoot8 root @
| $StmtBase	%SEMI						@ # @
:RULEEND

:RULE
$StmtBase
| $Expr									@ # @
| %BREAK								@ Break 0 @
| %CONTINUE								@ Continue 0 @
| %RETURN $Expr							@ Return 1 root	 @
| %RETURN								@ ReturnNull 1 root	 @				
| $Value %ASSIGN $Expr					@ Assign 2 SavedRoot3 root @
| $Value %ASSIGN $FuncDef				@ Assign 2 SavedRoot3 root @
| %VAR %ID								@ * Declr string ReadinToken2.name @
:EMPTY
:RULEEND

:RULE
$FuncDef
| %FUNC %LP $ArguDef %RP %LCB 
 $Stmts %RCB							@ FuncDef 2 SavedRoot4 root @
:RULEEND

:RULE
$ArguDef
| $LValue * %COM $LValue				@ ArguDef  2 SavedRoot4 root @
:EMPTY
:RULEEND


:RULE
$ValueGroup 
| $Value								@ # @
| %SUB $Value							@ Neg 1 root @
| %NOT $Value							@ Not 1 root @
| %REV $Value							@ Rev 1 root @
| %LP $Expr %RP							@ # @
:RULEEND

:RULE
$Value 
| %INT									@ * Value string _stoi(ReadinToken1.name) @
| %REAL									@ * Value string _stod(ReadinToken1.name) @
| %STRING								@ * Value string ReadinToken1.name @
| $LValue								@ # @
| $LValue %LP $Argu %RP                 @ FuncCall 2 SavedRoot2 root @
:RULEEND

:RULE
$Argu
| $Expr * %COM $Expr					@ Argu 2 SavedRoot4 root @
:EMPTY
:RULEEND	

:RULE
$LValue 
| %ID									@ * ID string ReadinToken1.name @
:RULEEND


	
//Calulate rules

:RULE
$Expr 
| $AndExpr * %OR $AndExpr				@ Or  2 SavedRoot4 root @
:RULEEND

:RULE
$AndExpr
| $BorExpr * %AND $BorExpr				@ And  2 SavedRoot4 root @
:RULEEND

:RULE
$BorExpr 
| $BandExpr * %BOR $BandExpr			@ Bor  2 SavedRoot4 root @
:RULEEND

:RULE
$BandExpr
| $EqCompExpr * %BAND $EqCompExpr		@ Band  2 SavedRoot4 root @
:RULEEND

:RULE
$EqCompExpr
| $CompExpr * %EQ  $CompExpr			@ Eq  2 SavedRoot4 root @
| $CompExpr * %NEQ $CompExpr			@ Neq 2 SavedRoot4 root @
:RULEEND

:RULE
$CompExpr
| $Sum * %GT  $Sum						@ Gt  2 SavedRoot4 root @
| $Sum * %LT  $Sum						@ Lt  2 SavedRoot4 root @
| $Sum * %NGT $Sum						@ Ngt 2 SavedRoot4 root @
| $Sum * %NLT $Sum						@ Nlt 2 SavedRoot4 root @
:RULEEND

:RULE
$Sum 
| $Fact * %ADD $Fact					@ Add 2 SavedRoot4 root @
| $Fact * %SUB $Fact					@ Sub 2 SavedRoot4 root @
:RULEEND

:RULE
$Fact
| $ValueGroup * %MUL $ValueGroup		@ Mul 2 SavedRoot4 root @
| $ValueGroup * %DIV $ValueGroup		@ Div 2 SavedRoot4 root @
| $ValueGroup * %MOD $ValueGroup		@ Mod 2 SavedRoot4 root @
:RULEEND