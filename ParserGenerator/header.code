#include<iostream>
#include"WeakScriptLex.h"
#include<string>
#include<memory>
#include "lex.h"
using namespace std;
class Node {
public:
	virtual void visit(int x) = 0;
	virtual void del() = 0;
	virtual 
};
class UnitNode : public Node {
public:
	UnitNode() {}
	void visitson(int x) {}
	virtual void del() {}
};
class UnaryNode : public Node {
	shared_ptr<Node> son;
public:
	UnaryNode(shared_ptr<Node>  _s)
		:son(_s) {}
	void visitson(int x) {
		son->visit(x);
	}
	virtual void del() {
		son->del();
	}
};
class BinaryNode : public Node {
	shared_ptr<Node> left, right;
public:
	BinaryNode(shared_ptr<Node>  _l, shared_ptr<Node>  _r)
		:left(_l), right(_r) {}
	void visitson(int x) {
		left->visit(x);
		right->visit(x);
	}
	virtual void del() {
		left->del();
		right->del();
	}
};
class TernaryNode : public Node {
	shared_ptr<Node> left, mid, right;
public:
	TernaryNode(shared_ptr<Node> _l, shared_ptr<Node> _m, shared_ptr<Node> _r)
		:left(_l), mid(_m), right(_r) {}
	void visitson(int x) {
		left->visit(x);
		mid->visit(x);
		right->visit(x);
	}
	virtual void del() {
		left->del();
		mid->del();
		right->del();
	}
};

Lex lex("test.ws");
shared_ptr<Node>  root = nullptr;
void refresh() {
	if (root == nullptr)return;
	root->del();
	root = nullptr;
};